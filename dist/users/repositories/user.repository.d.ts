import { DataSource, Repository } from 'typeorm';
import { User } from '../entities/user.entity';
import { DietaryPreference, DrinkingHabit, Gender, HealthCondition, MaritalStatus, PoliticalView, Religion, SmokingHabit } from '../enum/users.enum';
import { MediaService } from 'src/media/media.service';
import { MediaRepository } from 'src/media/repositories/media.repository';
import { MsPackageRepository } from 'src/ms-package/repositories/msPackage.repository';
import { MsPurchaseRepository } from 'src/ms-purchase/repositories/ms-purchase.repository';
import { EnrichedUser, FiltersOptions } from '../types/user.types';
export declare class UserRepository extends Repository<User> {
    private dataSource;
    private mediaService;
    private mediaRepository;
    private msPackageRepository;
    private msPurchaseRepository;
    constructor(dataSource: DataSource, mediaService: MediaService, mediaRepository: MediaRepository, msPackageRepository: MsPackageRepository, msPurchaseRepository: MsPurchaseRepository);
    findByIdWithoutPassword(id: string): Promise<Omit<User, 'password'> | null>;
    findAllPaginated(page?: number, pageSize?: number, sort?: string, filters?: FiltersOptions): Promise<{
        items: {
            id: string;
            firstName: string;
            lastName: string;
            email: string;
            phoneNumber?: string;
            bio?: string;
            motherTongue?: string;
            dateOfBirth?: Date;
            gender?: Gender;
            nationality?: string;
            country?: string;
            city?: string;
            maritalStatus?: MaritalStatus;
            profilePicture: string | null;
            additionalPhotos?: string[];
            blockedUsers?: string[];
            likedUsers?: string[];
            socialMediaLinks: {
                name: string;
                link: string;
            }[];
            preferredLanguages?: string[];
            userRole: import("../enum/users.enum").UserRole;
            accountStatus: import("../enum/users.enum").AccountStatus;
            purchasedMembership: string;
            timeZone?: string;
            highestEducation?: string;
            institutionName?: string;
            profession?: string;
            companyName?: string;
            monthlyIncome?: number;
            incomeCurrency?: import("../enum/users.enum").Currency;
            religion?: Religion;
            politicalView?: PoliticalView;
            livingArrangement?: import("../enum/users.enum").LivingArrangement;
            familyMemberCount?: number;
            interestedInGender?: string;
            lookingFor?: import("../enum/users.enum").LookingFor;
            preferredAgeRange?: string;
            preferredNationality?: string[];
            religionPreference?: import("../enum/users.enum").ReligionPreference;
            politicalPreference?: string;
            partnerExpectations?: string;
            weightKg?: number;
            heightCm?: number;
            bodyType?: import("../enum/users.enum").BodyType;
            drinkingHabit?: DrinkingHabit;
            smokingHabit?: SmokingHabit;
            healthCondition?: HealthCondition;
            hasPet?: boolean;
            dietaryPreference?: DietaryPreference;
            children?: number;
            familyBackground?: import("../enum/users.enum").FamilyBackground;
            culturalPractices?: import("../enum/users.enum").CulturalPractices;
            astrologicalSign?: import("../enum/users.enum").AstrologicalSign;
            loveLanguage?: import("../enum/users.enum").LoveLanguage;
            favoriteQuote?: string;
            profileVisibility?: import("../enum/users.enum").PrivacySettings;
            photoVisibility?: import("../enum/users.enum").PrivacySettings;
            messageAvailability?: import("../enum/users.enum").PrivacySettings;
            createdAt: Date;
            updatedAt: Date;
        }[];
        totalItems: number;
        itemsPerPage: number;
        currentPage: number;
        totalPages: number;
        hasPrevPage: boolean;
        hasNextPage: boolean;
        prevPage: number | null;
        nextPage: number | null;
    }>;
    enrichUserRelations(user: Omit<User, 'password'>): Promise<EnrichedUser>;
}
