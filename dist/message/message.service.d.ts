import { MediaService } from 'src/media/media.service';
import { Media } from 'src/media/entities/media.entity';
import { CreateMessageDto } from './dto/create-message.dto';
import { Message, MessageContent } from './entities/message.entity';
import { MessageRepository } from './repositories/message.repository';
import { UpdateMessageStatusDto } from './dto/update-message-status.dto';
import { MediaRepository } from 'src/media/repositories/media.repository';
import { GoogleTranslateService } from './translation/google-translate.service';
import { ConversationRepository } from 'src/conversation/repositories/conversation.repository';
import { PaginationOptions } from 'src/types/common.types';
export declare class MessageService {
    private readonly messageRepository;
    private readonly conversationRepository;
    private readonly googleTranslateService;
    private readonly mediaRepository;
    private readonly mediaService;
    constructor(messageRepository: MessageRepository, conversationRepository: ConversationRepository, googleTranslateService: GoogleTranslateService, mediaRepository: MediaRepository, mediaService: MediaService);
    private prepareMessageContent;
    createMessage(dto: CreateMessageDto, files?: {
        attachments?: Express.Multer.File[];
    }): Promise<{
        repliedToMessage: string | Message;
        attachments: Media[];
        id: string;
        conversationId: string;
        senderId: string;
        receiverId: string;
        message?: MessageContent;
        messageType: import("./enum/message.enum").MessageType;
        status: import("./enum/message.enum").MessageStatus;
        readAt: Date;
        isDeleted: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findById(id: string): Promise<{
        attachments: Media[];
        id: string;
        conversationId: string;
        senderId: string;
        receiverId: string;
        message?: MessageContent;
        messageType: import("./enum/message.enum").MessageType;
        status: import("./enum/message.enum").MessageStatus;
        readAt: Date;
        repliedToMessage: string;
        isDeleted: boolean;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    findByConversationId(conversationId: string, { page, pageSize, sort }: PaginationOptions): Promise<{
        items: {
            attachments: (Media | null)[];
            repliedToMessage: Message | null;
            id: string;
            conversationId: string;
            senderId: string;
            receiverId: string;
            message?: MessageContent;
            messageType: import("./enum/message.enum").MessageType;
            status: import("./enum/message.enum").MessageStatus;
            readAt: Date;
            isDeleted: boolean;
            createdAt: Date;
            updatedAt: Date;
        }[];
        totalItems: number;
        itemsPerPage: number;
        currentPage: number;
        totalPages: number;
        hasPrevPage: boolean;
        hasNextPage: boolean;
        prevPage: number | null;
        nextPage: number | null;
    }>;
    updateMessageContent(id: string, message: string, needsTranslation?: boolean): Promise<{
        repliedToMessage: Message | null;
        id: string;
        conversationId: string;
        senderId: string;
        receiverId: string;
        message?: MessageContent;
        messageType: import("./enum/message.enum").MessageType;
        status: import("./enum/message.enum").MessageStatus;
        readAt: Date;
        attachments?: string[];
        isDeleted: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateIsDeleted(id: string, dto: UpdateMessageStatusDto): Promise<Message>;
    removeAttachment(mediaId: string): Promise<void>;
}
